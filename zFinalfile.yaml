Parameters:
  NameofService:
    Description: Name of service
    Type: String

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - m1.small
      - m1.large
    Description: Enter one of the values listed above

  KeyName:
    Description: Name of EC2 login key
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  AmiRegionMap:
    us-east-1:
      AMI: "ami-0ff8a91507f77f867"
    us-west-1:
      AMI: "ami-0bdb828fd58c52235"

Resources:
  WebServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              php: []
              httpd: []
              wget: []
              unzip: []
              git: []
          commands:
            test:
              command: "wget https://www.tooplate.com/zip-templates/2119_gymso_fitness.zip && unzip 2119_gymso_fitness.zip && cp -r 2119_gymso_fitness/* var/www/html/"
          files:
            /var/www/html/hello.html:
              content: !Sub |
                <!DOCTYPE html>
                <html>
                <body>
                <h1> Welcome to my party!</h1>
                <p> This partyyyyyy deployed by CloudFormation!!!!!</p>
                </body>
                </html>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref KeyName
      ImageId: !FindInMap
        - AmiRegionMap
        - !Ref AWS::Region
        - AMI
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}

      Tags:
        - Key: "Name"
          Value: !Ref NameofService
      SecurityGroups:
        - !Ref VprofileSG

  VprofileSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 88.243.144.110/32

Outputs:
  PrintSomeInfo:
    Value: !GetAtt
      - WebServer
      - PublicDnsName
